<div class="container" style="margin-top: 4vh;">
  <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-10 p-lr-0-lg">
    <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
      Home
      <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
    </a>
    <a href="profile" class="stext-109 cl8 hov-cl1 trans-04">
      Profile
    </a>
  </div>
</div>

<div class="container rounded bg-white  mb-1">
    <div class="row ">
        {{#each user}}
        <div class="col-md-3 col-12 border-right">
            <div class="d-flex flex-column align-items-center text-center p-3 py-5">
                <span class="font-weight-bold">Hello {{this.userName}}</span>
                <span class="text-black-50">{{this.mail}}</span><span> </span></div>
                <div class="row">
        <div class="col">
            <h2>Profile</h2>
            <ul class="list-group">
               <a style="text-decoration: none;" href=""><li class="list-group-item text-dark">Profile Settings</li></a>
               <a style="text-decoration: none;" href=""><li class="list-group-item text-dark" id="myOrdersLink">My Orders</li></a>
                <a style="text-decoration: none;" href=""><li class="list-group-item text-dark" id="wishList"> My Wishlist</li></a>
                <a style="text-decoration: none;" href=""><li class="list-group-item text-dark" id="shippingadr"> My Addresses</li></a>
                <a style="text-decoration: none;" href="logout"><li class="list-group-item text-dark">Logout</li></a>
            </ul>
        </div>
    </div>
    </div>
        <div class="col-12 col-sm-12 col-md-9 border-right profile">
            <div class="p-3 ">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="text-right">Profile Settings</h4>
                </div>

                <div class="row mt-2">
                    <div class="col-12"><label class="labels">User Name</label><input type="text" class="form-control" id="username" placeholder="" value="{{this.userName}}"></div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12"><label class="labels">Mobile Number</label><input type="text" class="form-control" id="phonenumber" placeholder="enter phone number" value="{{this.phoneNumber}}"></div>
                    <div class="col-md-12 mt-3"><label class="labels">Email ID</label><input type="text" class="form-control" id="mail" placeholder="enter email id" value="{{this.mail}}"></div>
                </div>
                <div class="mt-5 text-center"><button class="btn btn-primary profile-button" id="saveProfileButton" type="button">Save Profile</button></div>
            </div>
        </div>
 
    </div>
    {{/each}}
</div>
</div>
</div>


<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Form for editing address fields -->
        <form id="editAddressForm">
          <div class="mb-3">
            <label for="editAddress" class="form-label">Address</label>
            <input type="text" class="form-control" id="editAddress">
          </div>
          <!-- Add other address fields as needed -->
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
      function handleCancelOrder(event) {
        event.preventDefault();
        const orderId = event.target.dataset.productId; // Retrieve order ID from data-product-id attribute

        axios.delete(`/cancel-order/${orderId}`)
            .then(function(response) {
                console.log('Order canceled successfully:', response.data);
                // Remove the order from the DOM
                event.target.closest('.list-group-item').remove();
            })
            .catch(function(error) {
                console.error('Error canceling order:', error);
                // Handle error if necessary
            });
    }

  function editAddressWithSweetAlert(index) {
      const address = user.addresses[index]; // Get the address object from the array
      swal({
        text: 'Edit Address:',
        content: {
          element: 'input',
          attributes: {
            value: address.address,
            placeholder: 'Enter new address',
            type: 'text',
          },
        },
        buttons: ['Cancel', 'Save'],
      }).then((value) => {
        if (value) {
          // Perform AJAX request to update the address on the server
          axios.post('/update-address', { index: index, address: value })
            .then(response => {
              // Optionally, handle success response
              swal('Address updated successfully!', {
                icon: 'success',
              });
            })
            .catch(error => {
              console.error('Error updating address:', error);
              // Optionally, handle error response
              swal('Error updating address!', {
                icon: 'error',
              });
            });
        }
      });
    }

    // Event listener for clicking the "Edit" button
    $('.btn-edit-address').click(function(event) {
      event.preventDefault();
      const index = $(this).data('index'); // Get the index of the address to be edited from data attribute
      editAddressWithSweetAlert(index);
    });







    function showToast(message, type) {
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "bottom", // `top` or `bottom`
                position: "right", // `left`, `center` or `right`
                backgroundColor: type === "error" ? "#ff0000" : "#008000",
            }).showToast();
        }
  document.getElementById('myOrdersLink').addEventListener('click', function(event) {
    console.log("clicked")
    event.preventDefault();
    axios.get('orderview')
      .then(function(response) {
        document.querySelector('.profile').innerHTML = response.data;
        console.log(response.data)
        if(window.innerWidth<768)
        {
                window.scrollBy({
            top: 300, // Change this value to adjust scrolling distance
            behavior: 'smooth' // You can change this to 'auto' for instant scrolling
        });
        }

      })
      .catch(function(error) {
        console.error(error);
        // Handle error if necessary
      });
  });

  document.getElementById('shippingadr').addEventListener('click', function(event) {
    console.log("clicked")
    event.preventDefault();
    axios.get('shippingadr')
      .then(function(response) {
        document.querySelector('.profile').innerHTML = response.data;
        if(window.innerWidth<768)
        {
            window.scrollBy({
            top: 300, // Change this value to adjust scrolling distance
            behavior: 'smooth' // You can change this to 'auto' for instant scrolling
        });
        }

      })
      .catch(function(error) {
        console.error(error);
        // Handle error if necessary
      });
  });

  document.getElementById('wishList').addEventListener('click', function(event) {
    console.log("clicked")
    event.preventDefault();
    axios.get('wishlistprofile')
      .then(function(response) {
        document.querySelector('.profile').innerHTML = response.data;
        if(window.innerWidth<768)
        {
                window.scrollBy({
            top: 400, // Change this value to adjust scrolling distance
            behavior: 'smooth' // You can change this to 'auto' for instant scrolling
        });
        }

      })
      .catch(function(error) {
        console.error(error);
        // Handle error if necessary
      });
  });
  function validateUsername(username) {
        return /^[a-zA-Z ]+$/.test(username);
    }

    function validatePhoneNumber(phoneNumber) {
        return /^\d{10}$/.test(phoneNumber);
    }

    function validateEmail(email) {
        return /\S+@\S+\.\S+/.test(email);
    }

    document.getElementById('saveProfileButton').addEventListener('click', async () => {
        console.log("clicked")
        const username = document.getElementById("username").value
        const phonenumber = document.getElementById("phonenumber").value
        const mail = document.getElementById("mail").value
        if (!validateUsername(username)) {
            showToast("Please enter a valid username", "error");
            return;
        }

        if (!validatePhoneNumber(phonenumber)) {
            showToast("Please enter a valid phone number (10 digits)", "error");
            return;
        }

        if (!validateEmail(mail)) {
            showToast("Please enter a valid email address", "error");
            return;
        }
        const profileData = {
        username,
        phonenumber,
        mail
        };

        try {
          // Send POST request to save profile
          const response = await axios.post('/updateprofile', profileData);
          showToast(response.data.message, "success");
          setTimeout(function(){ location.reload() }, 1000);

          // Optionally, you can show a success message or perform any other action upon successful save
        } catch (error) {
          console.error('Error saving profile:', error);
          // Optionally, you can show an error message or perform any other action upon error
        }
      });


});

function deleteaddr(index) {
        // Show a SweetAlert confirmation dialog
        swal({
            title: "Are you sure?",
            text: "Once deleted, you will not be able to recover this address!",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        }).then((willDelete) => {
            if (willDelete) {
                // Send an AJAX request to delete the address
                $.ajax({
                    url: "/delete-address",
                    method: "POST",
                    data: { index: index },
                    success: function(response) {
                        // If deletion is successful, remove the corresponding card from the DOM
                        $(`.card:eq(${index})`).remove();
                        // Optionally, you can show a success message or perform other actions
                        swal("Address deleted successfully!", {
                            icon: "success",
                        });
                    },
                    error: function(err) {
                        // Handle errors if deletion fails
                        console.error("Error deleting address:", err);
                        // Optionally, you can show an error message or perform other actions
                        swal("Error deleting address!", {
                            icon: "error",
                        });
                    }
                });
            }
        });
    }
function deleteOrder(orderId) {
    axios.post(`/update-status`,
    {
        orderId: orderId,
        newStatus: "Cancelled"
    })
     .then(response => {
            console.log('Delivery status updated successfully:', response.data);
            const statusElement = document.querySelector(`h5[data-id="${orderId}"]`);
             statusElement.textContent = `Order Status: ${response.data.order.Status}`;

        })
        .catch(error => {
            console.error('Error updating delivery status:', error);
            // Handle error response
        });
}
</script>


